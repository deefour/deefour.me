{
  "name": "sinon-chai",
  "description": "Extends Chai with assertions for the Sinon.JS mocking framework.",
  "keywords": [
    "sinon",
    "chai",
    "testing",
    "spies",
    "stubs",
    "mocks"
  ],
  "version": "2.1.2",
  "author": {
    "name": "Domenic Denicola",
    "email": "domenic@domenicdenicola.com",
    "url": "http://domenicdenicola.com"
  },
  "license": "WTFPL",
  "repository": {
    "type": "git",
    "url": "https://github.com/domenic/sinon-chai"
  },
  "bugs": {
    "url": "http://github.com/domenic/sinon-chai/issues"
  },
  "directories": {
    "lib": "./lib"
  },
  "main": "./lib/sinon-chai.js",
  "scripts": {
    "test": "mocha",
    "lint": "jshint ./lib --show-non-errors",
    "cover": "cover run node_modules/mocha/bin/_mocha && cover report html && start ./cover_html/index.html"
  },
  "engines": {
    "node": "*"
  },
  "dependencies": {
    "sinon": ">=1.3.4 <2"
  },
  "devDependencies": {
    "coffee-script": "1",
    "mocha": "1",
    "chai": "1",
    "cover": "*",
    "jshint": ">= 0.7.1"
  },
  "readme": "Sinon.JS Assertions for Chai\r\n============================\r\n\r\n**Sinon–Chai** provides a set of custom assertions for using the [Sinon.JS][sinon] spy, stub, and mocking framework\r\nwith the [Chai][chai] assertion library. You get all the benefits of Chai with all the powerful tools of Sinon.JS.\r\n\r\nInstead of using Sinon.JS's assertions:\r\n\r\n```javascript\r\nsinon.assertCalledWith(mySpy, \"foo\");\r\n```\r\n\r\nor awkwardly trying to use Chai's `should` or `expect` interfaces on spy properties:\r\n\r\n```javascript\r\nmySpy.calledWith(\"foo\").should.be.ok;\r\nexpect(mySpy.calledWith(\"foo\")).to.be.ok;\r\n```\r\n\r\nyou can say\r\n\r\n```javascript\r\nmySpy.should.have.been.calledWith(\"foo\");\r\n```\r\n\r\n\r\n## Assertions\r\n\r\nAll of your favorite Sinon.JS assertions made their way into Sinon–Chai. We show the `should` syntax here; the `expect`\r\nequivalent is also available.\r\n\r\n<table>\r\n    <tr>\r\n        <th>Sinon.JS property/method</th>\r\n        <th>Sinon–Chai assertion</th>\r\n    </tr>\r\n    <tr>\r\n        <td>called</td>\r\n        <td>spy.should.have.been.called</td>\r\n    </tr>\r\n    <tr>\r\n        <td>calledOnce</td>\r\n        <td>spy.should.have.been.calledOnce</td>\r\n    </tr>\r\n    <tr>\r\n        <td>calledTwice</td>\r\n        <td>spy.should.have.been.calledTwice</td>\r\n    </tr>\r\n    <tr>\r\n        <td>calledThrice</td>\r\n        <td>spy.should.have.been.calledThrice</td>\r\n    </tr>\r\n    <tr>\r\n        <td>calledBefore</td>\r\n        <td>spy1.should.have.been.calledBefore(spy2)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>calledAfter</td>\r\n        <td>spy1.should.have.been.calledAfter(spy2)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>calledOn</td>\r\n        <td>spy.should.have.been.calledOn(context)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>alwaysCalledOn</td>\r\n        <td>spy.should.always.have.been.calledOn(context)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>calledWith</td>\r\n        <td>spy.should.have.been.calledWith(...args)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>alwaysCalledWith</td>\r\n        <td>spy.should.always.have.been.calledWith(...args)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>calledWithExactly</td>\r\n        <td>spy.should.always.have.been.calledWithExactly(...args)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>alwaysCalledWithExactly</td>\r\n        <td>spy.should.always.have.been.calledWithExactly(...args)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>returned</td>\r\n        <td>spy.should.have.returned(returnVal)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>alwaysReturned</td>\r\n        <td>spy.should.have.always.returned(returnVal)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>threw</td>\r\n        <td>spy.should.have.thrown(errorObjOrErrorTypeStringOrNothing)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>alwaysThrew</td>\r\n        <td>spy.should.have.always.thrown(errorObjOrErrorTypeStringOrNothing)</td>\r\n    </tr>\r\n</table>\r\n\r\nFor more information on the behavior of each assertion, see\r\n[the documentation for the corresponding spy methods][spymethods]. These of course work on not only spies, but\r\nindividual spy calls, stubs, and mocks as well.\r\n\r\n\r\n## Installation and Usage\r\n\r\n### Node\r\n\r\nDo an `npm install sinon-chai` to get up and running. Then:\r\n\r\n```javascript\r\nvar chai = require(\"chai\");\r\nvar sinonChai = require(\"sinon-chai\");\r\n\r\nchai.use(sinonChai);\r\n```\r\n\r\nYou can of course put this code in a common test fixture file; for an example using [Mocha][mocha], see\r\n[the Sinon–Chai tests themselves][fixturedemo].\r\n\r\n### AMD\r\n\r\nSinon–Chai supports being used as an [AMD][amd] module, registering itself anonymously (just like Chai). So, assuming\r\nyou have configured your loader to map the Chai and Sinon–Chai files to the respective module IDs `\"chai\"` and\r\n`\"sinon-chai\"`, you can use them as follows:\r\n\r\n```javascript\r\ndefine(function (require, exports, module) {\r\n    var chai = require(\"chai\");\r\n    var sinonChai = require(\"sinon-chai\");\r\n\r\n    chai.use(sinonChai);\r\n});\r\n```\r\n\r\n### `<script>` tag\r\n\r\nIf you include Sinon–Chai directly with a `<script>` tag, after the one for Chai itself, then it will automatically plug\r\nin to Chai and be ready for use:\r\n\r\n```html\r\n<script src=\"chai.js\"></script>\r\n<script src=\"sinon-chai.js\"></script>\r\n```\r\n\r\n\r\n[sinon]: http://sinonjs.org/\r\n[chai]: http://chaijs.com/\r\n[mocha]: http://visionmedia.github.com/mocha/\r\n[fixturedemo]: https://github.com/domenic/sinon-chai/tree/master/test/\r\n[spymethods]: http://sinonjs.org/docs/#spies-api\r\n[amd]: https://github.com/amdjs/amdjs-api/wiki/AMD\r\n",
  "_id": "sinon-chai@2.1.2",
  "_from": "sinon-chai@2.1.2"
}
